// stdafx.h : include file for standard system include files,
// or project specific include files that are used frequently, but
// are changed infrequently
//

#pragma once

#include <windows.h>
#include "targetver.h"

#include <stdio.h>
#include <tchar.h>

/*** OpenCV ***/
#include <opencv/highgui.h>
#include <opencv2/core/core.hpp>
#include <opencv2/objdetect/objdetect.hpp>
#include <opencv2/highgui/highgui.hpp>
#include <opencv2/imgproc/imgproc.hpp>

#include <iostream>
#include <fstream>
#include <algorithm>
#include <string>
#include <vector>
#include <thread>
#include <mutex>
#include <queue>
#include <condition_variable>

/*** Intraface ***/
#include <intraface/core/core.h>

/*** Eigen ***/
#include <Eigen/Core>
#include <Eigen/SVD>
#include <Eigen/Cholesky>
#include <Eigen/Geometry>
#include <Eigen/LU>
#include <Eigen/Sparse>

#include "SLIC.h"

/***  Include files for OpenGL ***/
#include <GL/glew.h>
#include <GL/glut.h>

#include "Mesh.h"

/*** SDK for Kinect v1.8 ***/
#include <NuiApi.h>
#include <NuiSensor.h> //#include <NuiSkeleton.h>
#include <NuiImageCamera.h>

#define CL_HPP_MINIMUM_OPENCL_VERSION 100
#define CL_HPP_TARGET_OPENCL_VERSION 120

using namespace std;

#define	THREAD_SIZE_X 8
#define THREAD_SIZE_Y 8
#define STRIDE 256
//#define NB_BS 49
#define NB_BS 28
#define NB_SUP_PIXELS 200


#define VMAP_KER 0
#define NMAP_KER 1
#define BUMP_KER 2
#define NMAPBUMP_KER 3
#define VMAPBUMP_KER 4
#define DENSEBS_KER 5
#define BSSYSTEM_KER 6
#define REDUCE_KER 7
#define DATAPROC_KER 8
#define GICP_KER 9
#define REDUCEGICP_KER 10
#define JACOBI_KER 11
#define SYSTEMPR_KER 12
#define SOLVEPR_KER 13
#define SYSTEMPRB_KER 14
#define REDUCE1_KER 15
#define REDUCE2_KER 16
#define PSEUDOINV_KER 17
#define ATC_KER 18
#define REDSOLVE_KER 19
#define BILATERAL_KER 20
#define MEDIANFILTER_KER 21
#define FACESEGMENT_KER 22
#define VALIDCOUNT_KER 23
#define BUILDSEGMENT_KER 24
#define COMPLETESEGMENT_KER 25
#define ERODE_KER 26
#define UPDATEVBO_KER 27
#define NMAPBUMPD_KER 28
#define UPDATEVBOD_KER 29


// TODO: reference additional headers your program requires here

static const int        cDepthWidth = 640;
static const int        cDepthHeight = 480;

//static const int        cDepthWidth = 512;
//sstatic const int        cDepthHeight = 424;

static const int        cColorWidth = 1920;
static const int        cColorHeight = 1080;
static const int		BumpWidth = 120;
static const int		BumpHeight = 120;
static const int		FACT_BUMP = 240 / BumpWidth;
static const int		CAMERA_FRAME_RATE_IN_MS = 30;
static const int		FRAME_BUFFER_SIZE = 100;
static const bool		PRINT_RES = false;
static const int		MESSAGE_LENGTH = 40;
static const float		fact_BP = 1000.0f;
static const bool		VERBOSE = false;
static const int		NBVertices = 7366;

static const char *dest_name = "Seq\\DATA-K1-E";
static bool save_data = false;


typedef facio::FaceAlignmentSDM<facio::AlignmentFeature> SDM;
typedef facio::HPEstimatorProcrustes HPE;

typedef Mesh<float> MyMesh;
typedef Point3D<float> MyPoint;

typedef Eigen::SparseMatrix<double> SpMat;
typedef Eigen::Triplet<double> TrplType;

//facial features from #17 to #59
//static const int FACIAL_LANDMARKS[43] = { 6654, 6650, 6636, 6630, 6609, 2957, 2977, 2983, 2997, 3002, 6567, 3727, 5687, 2047, 5199, 5357, 5276, 1736, 1585, 3887, 3878, 3911, 7307, 3779, 3840, 3616, 3501, 3500, 3498, 256, 200, 5421, 7348, 7345, 7342, 7339, 7336, 1797, 1976, 2110, 5743, 5741, 5597 };
//static const int FACIAL_LANDMARKS[43] = { 3749, 3745, 3731, 3725, 3704, 1572, 1592, 1598, 1612, 1617, 3662, 2207, 3093, 966, 2650, 2774, 2693, 2693/*number 17 disapeared*/, 558, 2345, 2336, 2369, 4266, 2237, 2298, 2096, 1981, 1980, 1978, 237, 181, 2838, 4307, 4304, 4301, 4298, 4295, 732, /*911*/913, /*1029*/921, /*3149 1035*/ 1034, /*3147*/3024, /*3014*/3016 };
static const int FACIAL_LANDMARKS[51] = { 3749, 3745, 3731, 3725, 3704, 1572, 1592, 1598, 1612, 1617, 3662, 2207, 3093, 966, 2650, 2774, 2693, 662, 558, 2345, 2336, 2369, 4266, 2237, 2298, 2096, 1981, 1980, 1978, 237, 181, 2838, 4307, 4304, 4301, 4298, 4295, 732, 996, 998, 4277, 3148, 3133, 2865, 2728, 2188, 629, 733, 1011, 3114, 3110};

//static const int BackIndices[3083] = {};
static const int BackIndices[393] = { 174, 175, 1063, 1064, 1065, 1062, 1066, 1067, 1068, 1069, 1070, 1075, 1076, 1074, 1077, 1078, 1079, 1106, 1107, 1104, 1103, 1108, 1110, 1145, 1146, 1147, 1148, 1134, 1149, 1133, 1150, 1151, 1152, 1153, 1154, 1156, 1157, 1158, 1155, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1185, 1183, 1184, 1186, 1187, 1188, 1206, 1207, 1208, 1205, 1209, 1210, 1212, 1213, 1214, 1211, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1224, 1225, 1226, 1223, 1227, 1228, 2198, 3344, 3345, 1229, 1230, 1231, 2199, 1232, 1233, 1234, 1235, 2200, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1247, 1248, 1249, 1246, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 2201, 3384, 1268, 1269, 3387, 3388, 1270, 1271, 1272, 1273, 3393, 2202, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1699, 1700, 1701, 1702, 1703, 1704, 1705, 1706, 1707, 1708, 1709, 1710, 1711, 1712, 1698, 1713, 1726, 1727, 1728, 1729, 1730, 1731, 1732, 1733, 1734, 1735, 3875, 3876, 1696, 1736, 1737, 1738, 3880, 3881, 177, 1739, 1740, 3884, 1697, 1741, 3894, 1749, 1750, 1751, 176, 1752, 1753, 2223, 2224, 2217, 2214, 3183, 3182, 3185, 3184, 3186, 3187, 3189, 3188, 3190, 3195, 3196, 3194, 3197, 3199, 3198, 3225, 3226, 3228, 3229, 3230, 3232, 3231, 3265, 3254, 3266, 3253, 3267, 3269, 3268, 3271, 3270, 3273, 3272, 3275, 3274, 3277, 3276, 3278, 3280, 3279, 3281, 3283, 3282, 3284, 3285, 3286, 3289, 3288, 3287, 3291, 3290, 3293, 3292, 3299, 3298, 3301, 3300, 3302, 3304, 3303, 3305, 3321, 3320, 3323, 3322, 3324, 3325, 3327, 3326, 3329, 3328, 3330, 3331, 3332, 3335, 3334, 3333, 3336, 3337, 3339, 3338, 3341, 3340, 3342, 3343, 3347, 3346, 3349, 3348, 3209, 3350, 3351, 3208, 3352, 3353, 3354, 3355, 3356, 3359, 3358, 3357, 3361, 3360, 3363, 3362, 3365, 3364, 3366, 3368, 3367, 3370, 3369, 3371, 3372, 3373, 3374, 3375, 3376, 3377, 3378, 3379, 3380, 3381, 3382, 3383, 3385, 3386, 3389, 3392, 3391, 3390, 3394, 3395, 3396, 3399, 3398, 3397, 3402, 3401, 3400, 3403, 3405, 3404, 3407, 3406, 3834, 3837, 3836, 3835, 3839, 3838, 3840, 3841, 3842, 3843, 3844, 3845, 3846, 3847, 3833, 3848, 3866, 3865, 3868, 3867, 3870, 3869, 3872, 3871, 3874, 3873, 3831, 3879, 3878, 3877, 3882, 3883, 3832, 3885, 3893, 3895, 3896, 3897 };

static const int LEYE_IDX[10] = { 0, 2, 4, 6, 8, 10, 12, 14, 16, 17 };
static const int REYE_IDX[10] = { 1, 3, 5, 6, 9, 11, 13, 15, 16, 18 };
static const int MOUTH_IDX[29] = { 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47 };

#define divUp(x,y) (x%y) ? ((x+y-1)/y) : (x/y)

#define BUFFER_OFFSET(a) ((char*)NULL + (a))


//inline void checkErr(cl_int err, const char * name) {
//	if (err != CL_SUCCESS) {
//		std::cerr << "ERROR: " << name << " (" << err << ")" << std::endl;
//		//exit(EXIT_FAILURE);
//	}
//}

inline void quaternion2matrix(double *q, double m[3][3])
{
	double q00 = q[0] * q[0];
	double q11 = q[1] * q[1];
	double q22 = q[2] * q[2];
	double q33 = q[3] * q[3];
	double q03 = q[0] * q[3];
	double q13 = q[1] * q[3];
	double q23 = q[2] * q[3];
	double q02 = q[0] * q[2];
	double q12 = q[1] * q[2];
	double q01 = q[0] * q[1];
	m[0][0] = q00 + q11 - q22 - q33;
	m[1][1] = q00 - q11 + q22 - q33;
	m[2][2] = q00 - q11 - q22 + q33;
	m[0][1] = 2.0*(q12 - q03);
	m[1][0] = 2.0*(q12 + q03);
	m[0][2] = 2.0*(q13 + q02);
	m[2][0] = 2.0*(q13 - q02);
	m[1][2] = 2.0*(q23 - q01);
	m[2][1] = 2.0*(q23 + q01);
}

inline int Myround(float a) {
	int res = static_cast<int>(a);
	if (a - float(res) > 0.5)
		return res + 1;
	else
		return res;
}

template <typename T>
void Rot(T Rpt[3], T pt[3], T q[9]) {
	Rpt[0] = q[0] * pt[0] + q[3] * pt[1] + q[6] * pt[2];
	Rpt[1] = q[1] * pt[0] + q[4] * pt[1] + q[7] * pt[2];
	Rpt[2] = q[2] * pt[0] + q[5] * pt[1] + q[8] * pt[2];
}

inline void  normalize(float A[3]) {
	float val = sqrt(A[0] * A[0] + A[1] * A[1] + A[2] * A[2]);
	if (val > 0.0) {
		A[0] = A[0] / val;
		A[1] = A[1] / val;
		A[2] = A[2] / val;
	}
}

inline double MyMedian(double a, double b, double c) {
	if ((a >= b && a <= c) || (a <= b && a >= c))
		return a;
	if ((b >= a && b <= c) || (b <= a && b >= c))
		return b;
	if ((c >= a && c <= b) || (c <= a && c >= b))
		return c;
	cout << "no median error!" << endl;
	return a;
}


// assume qsi is (tx ty yz w0 w1 w2)
inline Eigen::Matrix4d Exponential(Eigen::Matrix<double, 6, 1> qsi) {
	double theta = sqrt(qsi(3, 0)*qsi(3, 0) + qsi(4, 0)*qsi(4, 0) + qsi(5, 0)*qsi(5, 0));
	Eigen::Matrix4d res = Eigen::Matrix4d::Identity();

	if (theta != 0.0) {
		res(0, 0) = 1.0 + sin(theta) / theta * 0.0f + (1.0 - cos(theta)) / (theta*theta) * (-qsi(5, 0)*qsi(5, 0) - qsi(4, 0)*qsi(4, 0));
		res(1, 0) = 0.0 + sin(theta) / theta * qsi(5, 0) + (1.0 - cos(theta)) / (theta*theta) * (qsi(3, 0)*qsi(4, 0));
		res(2, 0) = 0.0 - sin(theta) / theta * qsi(4, 0) + (1.0 - cos(theta)) / (theta*theta) * (qsi(3, 0)*qsi(5, 0));

		res(0, 1) = 0.0 - sin(theta) / theta * qsi(5, 0) + (1.0 - cos(theta)) / (theta*theta) * (qsi(3, 0)*qsi(4, 0));
		res(1, 1) = 1.0 + sin(theta) / theta * 0.0f + (1.0 - cos(theta)) / (theta*theta) * (-qsi(5, 0)*qsi(5, 0) - qsi(3, 0)*qsi(3, 0));
		res(2, 1) = 0.0 + sin(theta) / theta * qsi(3, 0) + (1.0 - cos(theta)) / (theta*theta) * (qsi(4, 0)*qsi(5, 0));

		res(0, 2) = 0.0 + sin(theta) / theta * qsi(4, 0) + (1.0 - cos(theta)) / (theta*theta) * (qsi(3, 0)*qsi(5, 0));
		res(1, 2) = 0.0 - sin(theta) / theta * qsi(3, 0) + (1.0 - cos(theta)) / (theta*theta) * (qsi(4, 0)*qsi(5, 0));
		res(2, 2) = 1.0 + sin(theta) / theta * 0.0f + (1.0 - cos(theta)) / (theta*theta) * (-qsi(4, 0)*qsi(4, 0) - qsi(3, 0)*qsi(3, 0));

		Eigen::Matrix3d skew;
		skew(0, 0) = 0.0; skew(0, 1) = -qsi(5, 0); skew(0, 2) = qsi(4, 0);
		skew(1, 0) = qsi(5, 0); skew(1, 1) = 0.0; skew(1, 2) = -qsi(3, 0);
		skew(2, 0) = -qsi(4, 0); skew(2, 1) = qsi(3, 0); skew(2, 2) = 0.0;

		Eigen::Matrix3d V = Eigen::Matrix3d::Identity() + ((1.0 - cos(theta)) / (theta*theta))*skew + ((theta - sin(theta)) / (theta*theta*theta))*skew*skew;

		res(0, 3) = V(0, 0)*qsi(0, 0) + V(0, 1)*qsi(1, 0) + V(0, 2)*qsi(2, 0);
		res(1, 3) = V(1, 0)*qsi(0, 0) + V(1, 1)*qsi(1, 0) + V(1, 2)*qsi(2, 0);
		res(2, 3) = V(2, 0)*qsi(0, 0) + V(2, 1)*qsi(1, 0) + V(2, 2)*qsi(2, 0);
	}
	else {
		res(0, 3) = qsi(0, 0);
		res(1, 3) = qsi(1, 0);
		res(2, 3) = qsi(2, 0);
	}

	return res;
}

// assume qsi is (tx ty yz w0 w1 w2)
inline Eigen::Matrix<double, 6, 1> Logarithm(Eigen::Matrix4d Mat) {
	double trace = Mat(0, 0) + Mat(1, 1) + Mat(2, 2);
	double theta = acos((trace - 1.0) / 2.0);

	Eigen::Matrix < double, 6, 1> qsi;
	if (theta == 0.0) {
		qsi(3, 0) = 0.0;
		qsi(4, 0) = 0.0;
		qsi(5, 0) = 0.0;

		qsi(0, 0) = Mat(0, 3);
		qsi(1, 0) = Mat(1, 3);
		qsi(2, 0) = Mat(2, 3);
		return qsi;
	}

	Eigen::Matrix3d R;
	for (int i = 0; i < 3; i++) {
		for (int j = 0; j < 3; j++) {
			R(i, j) = Mat(i, j);
		}
	}
	Eigen::Matrix3d lnR = (theta / (2.0f*sin(theta))) * (R - R.transpose());

	qsi(3, 0) = (lnR(2, 1) - lnR(1, 2)) / 2.0;
	qsi(4, 0) = (lnR(0, 2) - lnR(2, 0)) / 2.0;
	qsi(5, 0) = (lnR(1, 0) - lnR(0, 1)) / 2.0;

	theta = sqrt(qsi(3, 0)*qsi(3, 0) + qsi(4, 0)*qsi(4, 0) + qsi(5, 0)*qsi(5, 0));

	Eigen::Matrix3d skew;
	skew(0, 0) = 0.0; skew(0, 1) = -qsi(5, 0); skew(0, 2) = qsi(4, 0);
	skew(1, 0) = qsi(5, 0); skew(1, 1) = 0.0; skew(1, 2) = -qsi(3, 0);
	skew(2, 0) = -qsi(4, 0); skew(2, 1) = qsi(3, 0); skew(2, 2) = 0.0;

	Eigen::Matrix3d V = Eigen::Matrix3d::Identity() + ((1.0 - cos(theta)) / (theta*theta))*skew + ((theta - sin(theta)) / (theta*theta*theta))*skew*skew;
	Eigen::Matrix3d V_inv = V.inverse();

	qsi(0, 0) = V_inv(0, 0)*Mat(0, 3) + V_inv(0, 1)*Mat(1, 3) + V_inv(0, 2)*Mat(2, 3);
	qsi(1, 0) = V_inv(1, 0)*Mat(0, 3) + V_inv(1, 1)*Mat(1, 3) + V_inv(1, 2)*Mat(2, 3);
	qsi(2, 0) = V_inv(2, 0)*Mat(0, 3) + V_inv(2, 1)*Mat(1, 3) + V_inv(2, 2)*Mat(2, 3);

	return qsi;
}

// Safe release for interfaces
template<class Interface>
inline void SafeRelease(Interface *& pInterfaceToRelease)
{
	if (pInterfaceToRelease != NULL)
	{
		pInterfaceToRelease->Release();
		pInterfaceToRelease = NULL;
	}
}

//static const int TABLE_I[405] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
//1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
//2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
//3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
//4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
//5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
//6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
//7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
//8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
//9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
//10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,
//11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
//12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
//13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13,
//14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14,
//15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15,
//16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16,
//17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17,
//18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
//19, 19, 19, 19, 19, 19, 19, 19, 19,
//20, 20, 20, 20, 20, 20, 20, 20,
//21, 21, 21, 21, 21, 21, 21,
//22, 22, 22, 22, 22, 22,
//23, 23, 23, 23, 23,
//24, 24, 24, 24,
//25, 25, 25,
//26, 26 };
//
//static const int TABLE_J[405] = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27,
//1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27,
//2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27,
//3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27,
//4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27,
//5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27,
//6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27,
//7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27,
//8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27,
//9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27,
//10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27,
//11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27,
//12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27,
//13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27,
//14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27,
//15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27,
//16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27,
//17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27,
//18, 19, 20, 21, 22, 23, 24, 25, 26, 27,
//19, 20, 21, 22, 23, 24, 25, 26, 27,
//20, 21, 22, 23, 24, 25, 26, 27,
//21, 22, 23, 24, 25, 26, 27,
//22, 23, 24, 25, 26, 27,
//23, 24, 25, 26, 27,
//24, 25, 26, 27,
//25, 26, 27,
//26, 27 };



static const int TABLEGICP_I[28] = {	0, 0, 0, 0, 0, 0, 0,
										1, 1, 1, 1, 1, 1,
										2, 2, 2, 2, 2,
										3, 3, 3, 3,
										4, 4, 4,
										5, 5, 
										7
									};

static const int TABLEGICP_J[28] = {	0, 1, 2, 3, 4, 5, 6, 
										1, 2, 3, 4, 5, 6, 
										2, 3, 4, 5, 6, 
										3, 4, 5, 6, 
										4, 5, 6, 
										5, 6, 
										7
									};